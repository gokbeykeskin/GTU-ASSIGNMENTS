#version 400 core

//vertex info
in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector[4]; //4 light sources
out vec3 toCameraVector;
//fog
out float visibility; 

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLighting;

//fog
const float density = 0.001;
const float gradient = 3.0; 

void main(void){
	//world position of the vertex.
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoordinates = textureCoordinates;
	
	vec3 actualNormal = normal;
	if(useFakeLighting>0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i=0;i<4;i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	//fog
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow(distance*density,gradient));
	visibility = clamp(visibility,0.0,1.0);
}